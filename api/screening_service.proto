syntax = "proto3";
option go_package = "api";

service Screening_Service {
    rpc CreateScreening (CreateScreeningReq) returns (CreateScreeningResp) {
    }
    rpc ChangeFreeSeats (ChangeFreeSeatsReq) returns (ChangeFreeSeatsResp) {
    }
    rpc DeleteScreening (DeleteScreeningReq) returns (DeleteScreeningResp) {
    }
    rpc DeleteScreeningsWithRoom (DeleteScreeningsWithRoomReq) returns (DeleteScreeningsWithRoomResp) {
    }
    rpc DeleteScreeningsWithMovie (DeleteScreeningsWithMovieReq) returns (DeleteScreeningsWithMovieResp) {
    }
    rpc GetScreening (GetScreeningReq) returns (GetScreeningResp) {
    }
    rpc GetScreenings (GetScreeningsReq) returns (GetScreeningsResp) {
    }
}

message CreateScreeningReq {
    int32 movieID = 1;
    int32 roomID = 2;
}

message CreateScreeningResp {
    int32 screeningID = 1;
}

message ChangeFreeSeatsReq {
    int32 screeningID = 1;
    int32 change = 2;
}

message ChangeFreeSeatsResp {
}

message DeleteScreeningReq {
    int32 screeningID = 1;
}

message DeleteScreeningResp {
}

message DeleteScreeningsWithRoomReq {
    int32 roomID = 1;
}

message DeleteScreeningsWithRoomResp {
}

message DeleteScreeningsWithMovieReq {
    int32 movieID = 1;
}

message DeleteScreeningsWithMovieResp {
}

message GetScreeningReq {
    int32 screeningID = 1;
}

message GetScreeningResp {
    int32 movieID = 1;
    int32 roomID = 2;
    int32 nrOfFreeSeats = 3;
}

message GetScreeningsReq {
}

message GetScreeningsResp {
    repeated GetScreeningResp Screenings = 1;
}