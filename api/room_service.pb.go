// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/room_service.proto

package api

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CreateRoomReq struct {
	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	NrOfSeats int32  `protobuf:"varint,2,opt,name=nrOfSeats,proto3" json:"nrOfSeats,omitempty"`
}

func (m *CreateRoomReq) Reset()      { *m = CreateRoomReq{} }
func (*CreateRoomReq) ProtoMessage() {}
func (*CreateRoomReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_42bf95a61402c3ee, []int{0}
}
func (m *CreateRoomReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateRoomReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateRoomReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateRoomReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateRoomReq.Merge(m, src)
}
func (m *CreateRoomReq) XXX_Size() int {
	return m.Size()
}
func (m *CreateRoomReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateRoomReq.DiscardUnknown(m)
}

var xxx_messageInfo_CreateRoomReq proto.InternalMessageInfo

func (m *CreateRoomReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateRoomReq) GetNrOfSeats() int32 {
	if m != nil {
		return m.NrOfSeats
	}
	return 0
}

type CreateRoomResp struct {
	RoomID int32 `protobuf:"varint,1,opt,name=roomID,proto3" json:"roomID,omitempty"`
}

func (m *CreateRoomResp) Reset()      { *m = CreateRoomResp{} }
func (*CreateRoomResp) ProtoMessage() {}
func (*CreateRoomResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_42bf95a61402c3ee, []int{1}
}
func (m *CreateRoomResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateRoomResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateRoomResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateRoomResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateRoomResp.Merge(m, src)
}
func (m *CreateRoomResp) XXX_Size() int {
	return m.Size()
}
func (m *CreateRoomResp) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateRoomResp.DiscardUnknown(m)
}

var xxx_messageInfo_CreateRoomResp proto.InternalMessageInfo

func (m *CreateRoomResp) GetRoomID() int32 {
	if m != nil {
		return m.RoomID
	}
	return 0
}

type DeleteRoomReq struct {
	RoomID int32 `protobuf:"varint,1,opt,name=roomID,proto3" json:"roomID,omitempty"`
}

func (m *DeleteRoomReq) Reset()      { *m = DeleteRoomReq{} }
func (*DeleteRoomReq) ProtoMessage() {}
func (*DeleteRoomReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_42bf95a61402c3ee, []int{2}
}
func (m *DeleteRoomReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteRoomReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteRoomReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteRoomReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteRoomReq.Merge(m, src)
}
func (m *DeleteRoomReq) XXX_Size() int {
	return m.Size()
}
func (m *DeleteRoomReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteRoomReq.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteRoomReq proto.InternalMessageInfo

func (m *DeleteRoomReq) GetRoomID() int32 {
	if m != nil {
		return m.RoomID
	}
	return 0
}

type DeleteRoomResp struct {
}

func (m *DeleteRoomResp) Reset()      { *m = DeleteRoomResp{} }
func (*DeleteRoomResp) ProtoMessage() {}
func (*DeleteRoomResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_42bf95a61402c3ee, []int{3}
}
func (m *DeleteRoomResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteRoomResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteRoomResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteRoomResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteRoomResp.Merge(m, src)
}
func (m *DeleteRoomResp) XXX_Size() int {
	return m.Size()
}
func (m *DeleteRoomResp) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteRoomResp.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteRoomResp proto.InternalMessageInfo

type GetRoomReq struct {
	RoomID int32 `protobuf:"varint,1,opt,name=roomID,proto3" json:"roomID,omitempty"`
}

func (m *GetRoomReq) Reset()      { *m = GetRoomReq{} }
func (*GetRoomReq) ProtoMessage() {}
func (*GetRoomReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_42bf95a61402c3ee, []int{4}
}
func (m *GetRoomReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRoomReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRoomReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRoomReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRoomReq.Merge(m, src)
}
func (m *GetRoomReq) XXX_Size() int {
	return m.Size()
}
func (m *GetRoomReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRoomReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetRoomReq proto.InternalMessageInfo

func (m *GetRoomReq) GetRoomID() int32 {
	if m != nil {
		return m.RoomID
	}
	return 0
}

type GetRoomResp struct {
	Room *Room `protobuf:"bytes,1,opt,name=room,proto3" json:"room,omitempty"`
}

func (m *GetRoomResp) Reset()      { *m = GetRoomResp{} }
func (*GetRoomResp) ProtoMessage() {}
func (*GetRoomResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_42bf95a61402c3ee, []int{5}
}
func (m *GetRoomResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRoomResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRoomResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRoomResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRoomResp.Merge(m, src)
}
func (m *GetRoomResp) XXX_Size() int {
	return m.Size()
}
func (m *GetRoomResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRoomResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetRoomResp proto.InternalMessageInfo

func (m *GetRoomResp) GetRoom() *Room {
	if m != nil {
		return m.Room
	}
	return nil
}

type GetRoomsReq struct {
}

func (m *GetRoomsReq) Reset()      { *m = GetRoomsReq{} }
func (*GetRoomsReq) ProtoMessage() {}
func (*GetRoomsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_42bf95a61402c3ee, []int{6}
}
func (m *GetRoomsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRoomsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRoomsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRoomsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRoomsReq.Merge(m, src)
}
func (m *GetRoomsReq) XXX_Size() int {
	return m.Size()
}
func (m *GetRoomsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRoomsReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetRoomsReq proto.InternalMessageInfo

type GetRoomsResp struct {
	Rooms []*Room `protobuf:"bytes,1,rep,name=Rooms,proto3" json:"Rooms,omitempty"`
}

func (m *GetRoomsResp) Reset()      { *m = GetRoomsResp{} }
func (*GetRoomsResp) ProtoMessage() {}
func (*GetRoomsResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_42bf95a61402c3ee, []int{7}
}
func (m *GetRoomsResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRoomsResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRoomsResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRoomsResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRoomsResp.Merge(m, src)
}
func (m *GetRoomsResp) XXX_Size() int {
	return m.Size()
}
func (m *GetRoomsResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRoomsResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetRoomsResp proto.InternalMessageInfo

func (m *GetRoomsResp) GetRooms() []*Room {
	if m != nil {
		return m.Rooms
	}
	return nil
}

type Room struct {
	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	RoomID    int32  `protobuf:"varint,2,opt,name=roomID,proto3" json:"roomID,omitempty"`
	NrOfSeats int32  `protobuf:"varint,3,opt,name=nrOfSeats,proto3" json:"nrOfSeats,omitempty"`
}

func (m *Room) Reset()      { *m = Room{} }
func (*Room) ProtoMessage() {}
func (*Room) Descriptor() ([]byte, []int) {
	return fileDescriptor_42bf95a61402c3ee, []int{8}
}
func (m *Room) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Room) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Room.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Room) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Room.Merge(m, src)
}
func (m *Room) XXX_Size() int {
	return m.Size()
}
func (m *Room) XXX_DiscardUnknown() {
	xxx_messageInfo_Room.DiscardUnknown(m)
}

var xxx_messageInfo_Room proto.InternalMessageInfo

func (m *Room) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Room) GetRoomID() int32 {
	if m != nil {
		return m.RoomID
	}
	return 0
}

func (m *Room) GetNrOfSeats() int32 {
	if m != nil {
		return m.NrOfSeats
	}
	return 0
}

func init() {
	proto.RegisterType((*CreateRoomReq)(nil), "CreateRoomReq")
	proto.RegisterType((*CreateRoomResp)(nil), "CreateRoomResp")
	proto.RegisterType((*DeleteRoomReq)(nil), "DeleteRoomReq")
	proto.RegisterType((*DeleteRoomResp)(nil), "DeleteRoomResp")
	proto.RegisterType((*GetRoomReq)(nil), "GetRoomReq")
	proto.RegisterType((*GetRoomResp)(nil), "GetRoomResp")
	proto.RegisterType((*GetRoomsReq)(nil), "GetRoomsReq")
	proto.RegisterType((*GetRoomsResp)(nil), "GetRoomsResp")
	proto.RegisterType((*Room)(nil), "Room")
}

func init() { proto.RegisterFile("api/room_service.proto", fileDescriptor_42bf95a61402c3ee) }

var fileDescriptor_42bf95a61402c3ee = []byte{
	// 367 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0x3d, 0x4f, 0xc2, 0x40,
	0x18, 0xc7, 0xef, 0x80, 0xa2, 0x3c, 0xd0, 0x62, 0x6e, 0x20, 0x58, 0xcd, 0x85, 0x5c, 0x8c, 0xd6,
	0x98, 0x1c, 0x09, 0x4e, 0x8e, 0x2a, 0x89, 0x71, 0xd2, 0x94, 0xcd, 0x85, 0x54, 0x73, 0x26, 0x24,
	0x42, 0x4b, 0xaf, 0x71, 0xf6, 0x23, 0xf8, 0x31, 0xfc, 0x1e, 0x2e, 0x8e, 0x8c, 0x8c, 0x72, 0x2c,
	0x8e, 0x7c, 0x04, 0xd3, 0x03, 0xb9, 0x96, 0x68, 0xdc, 0x9e, 0x97, 0xff, 0xf3, 0x72, 0xbf, 0xe7,
	0xa0, 0x11, 0x44, 0x83, 0x76, 0x1c, 0x86, 0xc3, 0xbe, 0x14, 0xf1, 0xf3, 0xe0, 0x41, 0xf0, 0x28,
	0x0e, 0x93, 0x90, 0x9d, 0x83, 0x7d, 0x19, 0x8b, 0x20, 0x11, 0x7e, 0x18, 0x0e, 0x7d, 0x31, 0x26,
	0x04, 0x4a, 0xa3, 0x60, 0x28, 0x9a, 0xb8, 0x85, 0xbd, 0x8a, 0xaf, 0x6d, 0xb2, 0x0f, 0x95, 0x51,
	0x7c, 0xf3, 0xd8, 0x13, 0x41, 0x22, 0x9b, 0x85, 0x16, 0xf6, 0x2c, 0xdf, 0x04, 0x98, 0x07, 0x4e,
	0xb6, 0x85, 0x8c, 0x48, 0x03, 0xca, 0xe9, 0xa8, 0xeb, 0xae, 0xee, 0x62, 0xf9, 0x2b, 0x8f, 0x1d,
	0x81, 0xdd, 0x15, 0x4f, 0xc2, 0x0c, 0xfb, 0x4b, 0xb8, 0x03, 0x4e, 0x56, 0x28, 0x23, 0x76, 0x00,
	0x70, 0x25, 0x92, 0xff, 0xea, 0x3c, 0xa8, 0xae, 0x55, 0x32, 0x22, 0xbb, 0x50, 0x4a, 0x13, 0x5a,
	0x54, 0xed, 0x58, 0x5c, 0x27, 0x74, 0x88, 0xd9, 0x6b, 0xa5, 0xf4, 0xc5, 0x98, 0x9d, 0x40, 0xcd,
	0xb8, 0x32, 0x22, 0x7b, 0x60, 0x69, 0xa7, 0x89, 0x5b, 0x45, 0x53, 0xba, 0x8c, 0xb1, 0x5b, 0x28,
	0xa5, 0xc6, 0xaf, 0xa8, 0xcc, 0x66, 0x85, 0xec, 0x66, 0x79, 0x84, 0xc5, 0x0d, 0x84, 0x9d, 0x77,
	0x0c, 0xb5, 0xb4, 0x65, 0xbf, 0xb7, 0x3c, 0x0e, 0x69, 0x03, 0x18, 0xa6, 0xc4, 0xe1, 0xb9, 0x1b,
	0xb9, 0x75, 0x9e, 0x07, 0xce, 0x50, 0x5a, 0x60, 0x88, 0x11, 0x87, 0xe7, 0x38, 0xbb, 0x75, 0xbe,
	0x81, 0x13, 0x91, 0x43, 0xd8, 0x5a, 0xbd, 0x98, 0x54, 0xb9, 0x41, 0xeb, 0xd6, 0x78, 0x86, 0x20,
	0x43, 0xe4, 0x18, 0xb6, 0x7f, 0xc8, 0x90, 0x75, 0x2e, 0x65, 0xe6, 0xda, 0x3c, 0x8b, 0x8c, 0xa1,
	0x8b, 0xb3, 0xc9, 0x8c, 0xa2, 0xe9, 0x8c, 0xa2, 0xc5, 0x8c, 0xe2, 0x17, 0x45, 0xf1, 0x9b, 0xa2,
	0xf8, 0x43, 0x51, 0x3c, 0x51, 0x14, 0x7f, 0x2a, 0x8a, 0xbf, 0x14, 0x45, 0x0b, 0x45, 0xf1, 0xeb,
	0x9c, 0xa2, 0xc9, 0x9c, 0xa2, 0xe9, 0x9c, 0xa2, 0xbb, 0x62, 0x10, 0x0d, 0xee, 0xcb, 0xfa, 0x37,
	0x9e, 0x7e, 0x07, 0x00, 0x00, 0xff, 0xff, 0x16, 0x82, 0x4d, 0x42, 0xa7, 0x02, 0x00, 0x00,
}

func (this *CreateRoomReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateRoomReq)
	if !ok {
		that2, ok := that.(CreateRoomReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.NrOfSeats != that1.NrOfSeats {
		return false
	}
	return true
}
func (this *CreateRoomResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateRoomResp)
	if !ok {
		that2, ok := that.(CreateRoomResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoomID != that1.RoomID {
		return false
	}
	return true
}
func (this *DeleteRoomReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteRoomReq)
	if !ok {
		that2, ok := that.(DeleteRoomReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoomID != that1.RoomID {
		return false
	}
	return true
}
func (this *DeleteRoomResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteRoomResp)
	if !ok {
		that2, ok := that.(DeleteRoomResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetRoomReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetRoomReq)
	if !ok {
		that2, ok := that.(GetRoomReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoomID != that1.RoomID {
		return false
	}
	return true
}
func (this *GetRoomResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetRoomResp)
	if !ok {
		that2, ok := that.(GetRoomResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Room.Equal(that1.Room) {
		return false
	}
	return true
}
func (this *GetRoomsReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetRoomsReq)
	if !ok {
		that2, ok := that.(GetRoomsReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetRoomsResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetRoomsResp)
	if !ok {
		that2, ok := that.(GetRoomsResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Rooms) != len(that1.Rooms) {
		return false
	}
	for i := range this.Rooms {
		if !this.Rooms[i].Equal(that1.Rooms[i]) {
			return false
		}
	}
	return true
}
func (this *Room) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Room)
	if !ok {
		that2, ok := that.(Room)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.RoomID != that1.RoomID {
		return false
	}
	if this.NrOfSeats != that1.NrOfSeats {
		return false
	}
	return true
}
func (this *CreateRoomReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&api.CreateRoomReq{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "NrOfSeats: "+fmt.Sprintf("%#v", this.NrOfSeats)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateRoomResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&api.CreateRoomResp{")
	s = append(s, "RoomID: "+fmt.Sprintf("%#v", this.RoomID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteRoomReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&api.DeleteRoomReq{")
	s = append(s, "RoomID: "+fmt.Sprintf("%#v", this.RoomID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteRoomResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&api.DeleteRoomResp{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetRoomReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&api.GetRoomReq{")
	s = append(s, "RoomID: "+fmt.Sprintf("%#v", this.RoomID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetRoomResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&api.GetRoomResp{")
	if this.Room != nil {
		s = append(s, "Room: "+fmt.Sprintf("%#v", this.Room)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetRoomsReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&api.GetRoomsReq{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetRoomsResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&api.GetRoomsResp{")
	if this.Rooms != nil {
		s = append(s, "Rooms: "+fmt.Sprintf("%#v", this.Rooms)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Room) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&api.Room{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "RoomID: "+fmt.Sprintf("%#v", this.RoomID)+",\n")
	s = append(s, "NrOfSeats: "+fmt.Sprintf("%#v", this.NrOfSeats)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringRoomService(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *CreateRoomReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateRoomReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateRoomReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NrOfSeats != 0 {
		i = encodeVarintRoomService(dAtA, i, uint64(m.NrOfSeats))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintRoomService(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateRoomResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateRoomResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateRoomResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RoomID != 0 {
		i = encodeVarintRoomService(dAtA, i, uint64(m.RoomID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteRoomReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteRoomReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteRoomReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RoomID != 0 {
		i = encodeVarintRoomService(dAtA, i, uint64(m.RoomID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteRoomResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteRoomResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteRoomResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetRoomReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRoomReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRoomReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RoomID != 0 {
		i = encodeVarintRoomService(dAtA, i, uint64(m.RoomID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetRoomResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRoomResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRoomResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Room != nil {
		{
			size, err := m.Room.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRoomService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetRoomsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRoomsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRoomsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetRoomsResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRoomsResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRoomsResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rooms) > 0 {
		for iNdEx := len(m.Rooms) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rooms[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRoomService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Room) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Room) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Room) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NrOfSeats != 0 {
		i = encodeVarintRoomService(dAtA, i, uint64(m.NrOfSeats))
		i--
		dAtA[i] = 0x18
	}
	if m.RoomID != 0 {
		i = encodeVarintRoomService(dAtA, i, uint64(m.RoomID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintRoomService(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRoomService(dAtA []byte, offset int, v uint64) int {
	offset -= sovRoomService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CreateRoomReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRoomService(uint64(l))
	}
	if m.NrOfSeats != 0 {
		n += 1 + sovRoomService(uint64(m.NrOfSeats))
	}
	return n
}

func (m *CreateRoomResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoomID != 0 {
		n += 1 + sovRoomService(uint64(m.RoomID))
	}
	return n
}

func (m *DeleteRoomReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoomID != 0 {
		n += 1 + sovRoomService(uint64(m.RoomID))
	}
	return n
}

func (m *DeleteRoomResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetRoomReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoomID != 0 {
		n += 1 + sovRoomService(uint64(m.RoomID))
	}
	return n
}

func (m *GetRoomResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Room != nil {
		l = m.Room.Size()
		n += 1 + l + sovRoomService(uint64(l))
	}
	return n
}

func (m *GetRoomsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetRoomsResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rooms) > 0 {
		for _, e := range m.Rooms {
			l = e.Size()
			n += 1 + l + sovRoomService(uint64(l))
		}
	}
	return n
}

func (m *Room) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRoomService(uint64(l))
	}
	if m.RoomID != 0 {
		n += 1 + sovRoomService(uint64(m.RoomID))
	}
	if m.NrOfSeats != 0 {
		n += 1 + sovRoomService(uint64(m.NrOfSeats))
	}
	return n
}

func sovRoomService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRoomService(x uint64) (n int) {
	return sovRoomService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CreateRoomReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateRoomReq{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`NrOfSeats:` + fmt.Sprintf("%v", this.NrOfSeats) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateRoomResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateRoomResp{`,
		`RoomID:` + fmt.Sprintf("%v", this.RoomID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteRoomReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteRoomReq{`,
		`RoomID:` + fmt.Sprintf("%v", this.RoomID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteRoomResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteRoomResp{`,
		`}`,
	}, "")
	return s
}
func (this *GetRoomReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetRoomReq{`,
		`RoomID:` + fmt.Sprintf("%v", this.RoomID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetRoomResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetRoomResp{`,
		`Room:` + strings.Replace(this.Room.String(), "Room", "Room", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetRoomsReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetRoomsReq{`,
		`}`,
	}, "")
	return s
}
func (this *GetRoomsResp) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRooms := "[]*Room{"
	for _, f := range this.Rooms {
		repeatedStringForRooms += strings.Replace(f.String(), "Room", "Room", 1) + ","
	}
	repeatedStringForRooms += "}"
	s := strings.Join([]string{`&GetRoomsResp{`,
		`Rooms:` + repeatedStringForRooms + `,`,
		`}`,
	}, "")
	return s
}
func (this *Room) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Room{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`RoomID:` + fmt.Sprintf("%v", this.RoomID) + `,`,
		`NrOfSeats:` + fmt.Sprintf("%v", this.NrOfSeats) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringRoomService(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CreateRoomReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoomService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateRoomReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateRoomReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoomService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRoomService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NrOfSeats", wireType)
			}
			m.NrOfSeats = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NrOfSeats |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRoomService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoomService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRoomService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateRoomResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoomService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateRoomResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateRoomResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomID", wireType)
			}
			m.RoomID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRoomService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoomService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRoomService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteRoomReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoomService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteRoomReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteRoomReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomID", wireType)
			}
			m.RoomID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRoomService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoomService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRoomService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteRoomResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoomService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteRoomResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteRoomResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRoomService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoomService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRoomService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRoomReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoomService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRoomReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRoomReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomID", wireType)
			}
			m.RoomID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRoomService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoomService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRoomService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRoomResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoomService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRoomResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRoomResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Room", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoomService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRoomService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Room == nil {
				m.Room = &Room{}
			}
			if err := m.Room.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoomService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoomService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRoomService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRoomsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoomService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRoomsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRoomsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRoomService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoomService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRoomService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRoomsResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoomService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRoomsResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRoomsResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rooms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoomService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRoomService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rooms = append(m.Rooms, &Room{})
			if err := m.Rooms[len(m.Rooms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoomService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoomService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRoomService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Room) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoomService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Room: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Room: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoomService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRoomService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomID", wireType)
			}
			m.RoomID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NrOfSeats", wireType)
			}
			m.NrOfSeats = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NrOfSeats |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRoomService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoomService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRoomService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRoomService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRoomService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRoomService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRoomService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRoomService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRoomService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRoomService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRoomService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRoomService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRoomService = fmt.Errorf("proto: unexpected end of group")
)
