// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: api/screening_service.proto

package api

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Screening_Service service

type Screening_Service interface {
	CreateScreening(ctx context.Context, in *CreateScreeningReq, opts ...client.CallOption) (*CreateScreeningResp, error)
	ChangeFreeSeats(ctx context.Context, in *ChangeFreeSeatsReq, opts ...client.CallOption) (*ChangeFreeSeatsResp, error)
	DeleteScreening(ctx context.Context, in *DeleteScreeningReq, opts ...client.CallOption) (*DeleteScreeningResp, error)
	DeleteScreeningsWithRoom(ctx context.Context, in *DeleteScreeningsWithRoomReq, opts ...client.CallOption) (*DeleteScreeningsWithRoomResp, error)
	DeleteScreeningsWithMovie(ctx context.Context, in *DeleteScreeningsWithMovieReq, opts ...client.CallOption) (*DeleteScreeningsWithMovieResp, error)
	GetScreening(ctx context.Context, in *GetScreeningReq, opts ...client.CallOption) (*GetScreeningResp, error)
	GetScreenings(ctx context.Context, in *GetScreeningsReq, opts ...client.CallOption) (*GetScreeningsResp, error)
}

type screening_Service struct {
	c    client.Client
	name string
}

func NewScreening_Service(name string, c client.Client) Screening_Service {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "screening_service"
	}
	return &screening_Service{
		c:    c,
		name: name,
	}
}

func (c *screening_Service) CreateScreening(ctx context.Context, in *CreateScreeningReq, opts ...client.CallOption) (*CreateScreeningResp, error) {
	req := c.c.NewRequest(c.name, "Screening_Service.CreateScreening", in)
	out := new(CreateScreeningResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *screening_Service) ChangeFreeSeats(ctx context.Context, in *ChangeFreeSeatsReq, opts ...client.CallOption) (*ChangeFreeSeatsResp, error) {
	req := c.c.NewRequest(c.name, "Screening_Service.ChangeFreeSeats", in)
	out := new(ChangeFreeSeatsResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *screening_Service) DeleteScreening(ctx context.Context, in *DeleteScreeningReq, opts ...client.CallOption) (*DeleteScreeningResp, error) {
	req := c.c.NewRequest(c.name, "Screening_Service.DeleteScreening", in)
	out := new(DeleteScreeningResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *screening_Service) DeleteScreeningsWithRoom(ctx context.Context, in *DeleteScreeningsWithRoomReq, opts ...client.CallOption) (*DeleteScreeningsWithRoomResp, error) {
	req := c.c.NewRequest(c.name, "Screening_Service.DeleteScreeningsWithRoom", in)
	out := new(DeleteScreeningsWithRoomResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *screening_Service) DeleteScreeningsWithMovie(ctx context.Context, in *DeleteScreeningsWithMovieReq, opts ...client.CallOption) (*DeleteScreeningsWithMovieResp, error) {
	req := c.c.NewRequest(c.name, "Screening_Service.DeleteScreeningsWithMovie", in)
	out := new(DeleteScreeningsWithMovieResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *screening_Service) GetScreening(ctx context.Context, in *GetScreeningReq, opts ...client.CallOption) (*GetScreeningResp, error) {
	req := c.c.NewRequest(c.name, "Screening_Service.GetScreening", in)
	out := new(GetScreeningResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *screening_Service) GetScreenings(ctx context.Context, in *GetScreeningsReq, opts ...client.CallOption) (*GetScreeningsResp, error) {
	req := c.c.NewRequest(c.name, "Screening_Service.GetScreenings", in)
	out := new(GetScreeningsResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Screening_Service service

type Screening_ServiceHandler interface {
	CreateScreening(context.Context, *CreateScreeningReq, *CreateScreeningResp) error
	ChangeFreeSeats(context.Context, *ChangeFreeSeatsReq, *ChangeFreeSeatsResp) error
	DeleteScreening(context.Context, *DeleteScreeningReq, *DeleteScreeningResp) error
	DeleteScreeningsWithRoom(context.Context, *DeleteScreeningsWithRoomReq, *DeleteScreeningsWithRoomResp) error
	DeleteScreeningsWithMovie(context.Context, *DeleteScreeningsWithMovieReq, *DeleteScreeningsWithMovieResp) error
	GetScreening(context.Context, *GetScreeningReq, *GetScreeningResp) error
	GetScreenings(context.Context, *GetScreeningsReq, *GetScreeningsResp) error
}

func RegisterScreening_ServiceHandler(s server.Server, hdlr Screening_ServiceHandler, opts ...server.HandlerOption) error {
	type screening_Service interface {
		CreateScreening(ctx context.Context, in *CreateScreeningReq, out *CreateScreeningResp) error
		ChangeFreeSeats(ctx context.Context, in *ChangeFreeSeatsReq, out *ChangeFreeSeatsResp) error
		DeleteScreening(ctx context.Context, in *DeleteScreeningReq, out *DeleteScreeningResp) error
		DeleteScreeningsWithRoom(ctx context.Context, in *DeleteScreeningsWithRoomReq, out *DeleteScreeningsWithRoomResp) error
		DeleteScreeningsWithMovie(ctx context.Context, in *DeleteScreeningsWithMovieReq, out *DeleteScreeningsWithMovieResp) error
		GetScreening(ctx context.Context, in *GetScreeningReq, out *GetScreeningResp) error
		GetScreenings(ctx context.Context, in *GetScreeningsReq, out *GetScreeningsResp) error
	}
	type Screening_Service struct {
		screening_Service
	}
	h := &screening_ServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&Screening_Service{h}, opts...))
}

type screening_ServiceHandler struct {
	Screening_ServiceHandler
}

func (h *screening_ServiceHandler) CreateScreening(ctx context.Context, in *CreateScreeningReq, out *CreateScreeningResp) error {
	return h.Screening_ServiceHandler.CreateScreening(ctx, in, out)
}

func (h *screening_ServiceHandler) ChangeFreeSeats(ctx context.Context, in *ChangeFreeSeatsReq, out *ChangeFreeSeatsResp) error {
	return h.Screening_ServiceHandler.ChangeFreeSeats(ctx, in, out)
}

func (h *screening_ServiceHandler) DeleteScreening(ctx context.Context, in *DeleteScreeningReq, out *DeleteScreeningResp) error {
	return h.Screening_ServiceHandler.DeleteScreening(ctx, in, out)
}

func (h *screening_ServiceHandler) DeleteScreeningsWithRoom(ctx context.Context, in *DeleteScreeningsWithRoomReq, out *DeleteScreeningsWithRoomResp) error {
	return h.Screening_ServiceHandler.DeleteScreeningsWithRoom(ctx, in, out)
}

func (h *screening_ServiceHandler) DeleteScreeningsWithMovie(ctx context.Context, in *DeleteScreeningsWithMovieReq, out *DeleteScreeningsWithMovieResp) error {
	return h.Screening_ServiceHandler.DeleteScreeningsWithMovie(ctx, in, out)
}

func (h *screening_ServiceHandler) GetScreening(ctx context.Context, in *GetScreeningReq, out *GetScreeningResp) error {
	return h.Screening_ServiceHandler.GetScreening(ctx, in, out)
}

func (h *screening_ServiceHandler) GetScreenings(ctx context.Context, in *GetScreeningsReq, out *GetScreeningsResp) error {
	return h.Screening_ServiceHandler.GetScreenings(ctx, in, out)
}
