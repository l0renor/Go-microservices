// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: api/user_service.proto

package api

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for User_Service service

type User_Service interface {
	CreateUser(ctx context.Context, in *CreateUserReq, opts ...client.CallOption) (*CreateUserResp, error)
	DeleteUser(ctx context.Context, in *DeleteUserReq, opts ...client.CallOption) (*DeleteUserResp, error)
	GetUser(ctx context.Context, in *GetUserReq, opts ...client.CallOption) (*GetUserResp, error)
	GetUsers(ctx context.Context, in *GetUsersReq, opts ...client.CallOption) (*GetUsersResp, error)
	AddUserReservation(ctx context.Context, in *AddUserReservationReq, opts ...client.CallOption) (*AddUserReservationResp, error)
	DeleteUserReservation(ctx context.Context, in *DeleteUserReservationReq, opts ...client.CallOption) (*DeleteUserReservationResp, error)
}

type user_Service struct {
	c    client.Client
	name string
}

func NewUser_Service(name string, c client.Client) User_Service {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "user_service"
	}
	return &user_Service{
		c:    c,
		name: name,
	}
}

func (c *user_Service) CreateUser(ctx context.Context, in *CreateUserReq, opts ...client.CallOption) (*CreateUserResp, error) {
	req := c.c.NewRequest(c.name, "User_Service.CreateUser", in)
	out := new(CreateUserResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *user_Service) DeleteUser(ctx context.Context, in *DeleteUserReq, opts ...client.CallOption) (*DeleteUserResp, error) {
	req := c.c.NewRequest(c.name, "User_Service.DeleteUser", in)
	out := new(DeleteUserResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *user_Service) GetUser(ctx context.Context, in *GetUserReq, opts ...client.CallOption) (*GetUserResp, error) {
	req := c.c.NewRequest(c.name, "User_Service.GetUser", in)
	out := new(GetUserResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *user_Service) GetUsers(ctx context.Context, in *GetUsersReq, opts ...client.CallOption) (*GetUsersResp, error) {
	req := c.c.NewRequest(c.name, "User_Service.GetUsers", in)
	out := new(GetUsersResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *user_Service) AddUserReservation(ctx context.Context, in *AddUserReservationReq, opts ...client.CallOption) (*AddUserReservationResp, error) {
	req := c.c.NewRequest(c.name, "User_Service.AddUserReservation", in)
	out := new(AddUserReservationResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *user_Service) DeleteUserReservation(ctx context.Context, in *DeleteUserReservationReq, opts ...client.CallOption) (*DeleteUserReservationResp, error) {
	req := c.c.NewRequest(c.name, "User_Service.DeleteUserReservation", in)
	out := new(DeleteUserReservationResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for User_Service service

type User_ServiceHandler interface {
	CreateUser(context.Context, *CreateUserReq, *CreateUserResp) error
	DeleteUser(context.Context, *DeleteUserReq, *DeleteUserResp) error
	GetUser(context.Context, *GetUserReq, *GetUserResp) error
	GetUsers(context.Context, *GetUsersReq, *GetUsersResp) error
	AddUserReservation(context.Context, *AddUserReservationReq, *AddUserReservationResp) error
	DeleteUserReservation(context.Context, *DeleteUserReservationReq, *DeleteUserReservationResp) error
}

func RegisterUser_ServiceHandler(s server.Server, hdlr User_ServiceHandler, opts ...server.HandlerOption) error {
	type user_Service interface {
		CreateUser(ctx context.Context, in *CreateUserReq, out *CreateUserResp) error
		DeleteUser(ctx context.Context, in *DeleteUserReq, out *DeleteUserResp) error
		GetUser(ctx context.Context, in *GetUserReq, out *GetUserResp) error
		GetUsers(ctx context.Context, in *GetUsersReq, out *GetUsersResp) error
		AddUserReservation(ctx context.Context, in *AddUserReservationReq, out *AddUserReservationResp) error
		DeleteUserReservation(ctx context.Context, in *DeleteUserReservationReq, out *DeleteUserReservationResp) error
	}
	type User_Service struct {
		user_Service
	}
	h := &user_ServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&User_Service{h}, opts...))
}

type user_ServiceHandler struct {
	User_ServiceHandler
}

func (h *user_ServiceHandler) CreateUser(ctx context.Context, in *CreateUserReq, out *CreateUserResp) error {
	return h.User_ServiceHandler.CreateUser(ctx, in, out)
}

func (h *user_ServiceHandler) DeleteUser(ctx context.Context, in *DeleteUserReq, out *DeleteUserResp) error {
	return h.User_ServiceHandler.DeleteUser(ctx, in, out)
}

func (h *user_ServiceHandler) GetUser(ctx context.Context, in *GetUserReq, out *GetUserResp) error {
	return h.User_ServiceHandler.GetUser(ctx, in, out)
}

func (h *user_ServiceHandler) GetUsers(ctx context.Context, in *GetUsersReq, out *GetUsersResp) error {
	return h.User_ServiceHandler.GetUsers(ctx, in, out)
}

func (h *user_ServiceHandler) AddUserReservation(ctx context.Context, in *AddUserReservationReq, out *AddUserReservationResp) error {
	return h.User_ServiceHandler.AddUserReservation(ctx, in, out)
}

func (h *user_ServiceHandler) DeleteUserReservation(ctx context.Context, in *DeleteUserReservationReq, out *DeleteUserReservationResp) error {
	return h.User_ServiceHandler.DeleteUserReservation(ctx, in, out)
}
